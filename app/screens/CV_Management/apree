import {
  Pressable,
  ScrollView,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  View,
} from "react-native";
import React, { useContext, useEffect, useReducer, useRef } from "react";
import { HeaderContext } from "../../providers/context/header";
import {
  Button,
  ImageComponent,
  CustomInput as Input,
  Text,
} from "../../components/ui";
import { scale } from "react-native-size-matters";
import themeContext from "../../config/theme/themeContext";
import { AntDesign } from "@expo/vector-icons";
import { Seperator } from "../../components/ui/_helpers";
import { useFocusEffect, useIsFocused } from "@react-navigation/native";
import { Ionicons } from "@expo/vector-icons";
import {
  fetch_user_data,
  update_job_seeker,
} from "../../providers/call-service/cv_";
import ApiContext from "../../providers/context/api";
import {
  Certification,
  Education,
  Reference,
  UserDetails,
  WorkExperience,
} from "../../../types";
import { KeyboardAvoidingView } from "../../components/ui/customElements";

interface State {
  education: Education[];
  workExperience: WorkExperience[];
  certifications: Certification[];
  references: Reference[];
  userDetails: UserDetails;
}

type Action =
  | { type: "SET_EDUCATION"; payload: Education[] }
  | { type: "SET_WORK_EXPERIENCE"; payload: WorkExperience[] }
  | { type: "SET_CERTIFICATIONS"; payload: Certification[] }
  | { type: "SET_REFERENCES"; payload: Reference[] }
  | { type: "SET_USER_DETAILS"; payload: UserDetails }
  | { type: "ADD_EDUCATION" }
  | { type: "ADD_WORK_EXPERIENCE" }
  | { type: "ADD_CERTIFICATIONS" }
  | { type: "ADD_REFERENCES" };

const initialState: State = {
  education: [],
  workExperience: [],
  certifications: [],
  references: [],
  userDetails: {
    first_name: "",
    last_name: "",
    middle_name: "",
    email: "",
    phone_number: "",
    address: "",
    city: "",
    state: "",
    country_of_residence: "",
    linkdin: "",
    twitter: "",
    personal_statement: "",
  },
};

const Home = ({ navigation, route }: { navigation: any; route: any }) => {
  const route_params = route.params;

  const educationRef = useRef<ScrollView>(null);
  const workExperienceRef = useRef<ScrollView>(null);
  const certificationRef = useRef<ScrollView>(null);
  const referenceRef = useRef<ScrollView>(null);

  const theme = useContext(themeContext);
  const { useApiMutation, useApiQuery } = useContext(ApiContext);
  const { showHeaderTextHandler } = React.useContext(HeaderContext);

  const { data, error, refetch, isSuccess, isLoading } = useApiQuery({
    queryKey: "fetchUserData",
    queryFunction: fetch_user_data,
  });

  const uploadCv = useApiMutation({
    mutationFunction: update_job_seeker,
  });

  const reducer = (state: State, action: Action): State => {
    switch (action.type) {
      case "SET_EDUCATION":
        return { ...state, education: action.payload };
      case "SET_WORK_EXPERIENCE":
        return { ...state, workExperience: action.payload };
      case "SET_CERTIFICATIONS":
        return { ...state, certifications: action.payload };
      case "SET_REFERENCES":
        return { ...state, references: action.payload };
      case "SET_USER_DETAILS":
        return { ...state, userDetails: action.payload };
      case "ADD_EDUCATION":
        return {
          ...state,
          education: [
            ...state.education,
            {
              id: state.education.length + 1,
              school_name: "",
              start_year: "",
              end_year: "",
              course_of_study: "",
              degree_type: "",
            },
          ],
        };

      case "ADD_WORK_EXPERIENCE":
        return {
          ...state,
          workExperience: [
            ...state.workExperience,
            {
              id: state.workExperience.length + 1,
              company: "",
              position: "",
              start_year: "",
              end_year: "",
              role: "",
              responsibilities: "",
            },
          ],
        };

      case "ADD_CERTIFICATIONS":
        return {
          ...state,
          certifications: [
            ...state.certifications,
            {
              id: state.certifications.length + 1,
              certification: "",
              year: "",
              issuer: "",
            },
          ],
        };

      case "ADD_REFERENCES":
        return {
          ...state,
          references: [
            ...state.references,
            {
              id: state.references.length + 1,
              full_name: "",
              relationship: "",
              email: "",
              phone_number: "",
            },
          ],
        };

      default:
        return state;
    }
  };

  const [state, dispatch] = useReducer(reducer, initialState);
  const { education, workExperience, certifications, references, userDetails } =
    state;

  const handleEducationChange = (text: string, name: string, id: number) => {
    const newEducation = education.map((item) => {
      if (item.id === id) {
        return {
          ...item,
          [name]: text,
        };
      }
      return item;
    });
    dispatch({ type: "SET_EDUCATION", payload: newEducation });
  };

  const handleWorkExperienceChange = (
    text: string,
    name: string,
    id: number
  ) => {
    const newWorkExperience = workExperience.map((item) => {
      if (item.id === id) {
        return {
          ...item,
          [name]: text,
        };
      }
      return item;
    });
    dispatch({ type: "SET_WORK_EXPERIENCE", payload: newWorkExperience });
  };

  const handleCertificationsChange = (
    text: string,
    name: string,
    id: number
  ) => {
    const newCertifications = certifications.map((item) => {
      if (item.id === id) {
        return {
          ...item,
          [name]: text,
        };
      }
      return item;
    });
    dispatch({ type: "SET_CERTIFICATIONS", payload: newCertifications });
  };

  const handleReferencesChange = (text: string, name: string, id: number) => {
    const newReferences = references.map((item) => {
      if (item.id === id) {
        return {
          ...item,
          [name]: text,
        };
      }
      return item;
    });
    dispatch({ type: "SET_REFERENCES", payload: newReferences });
  };

  const handleFormChange = (text: string, name: string) => {
    dispatch({
      type: "SET_USER_DETAILS",
      payload: { ...userDetails, [name]: text },
    });
  };

  const handleAddEducation = () => {
    dispatch({ type: "ADD_EDUCATION" });
    setTimeout(() => {
      educationRef.current?.scrollToEnd({ animated: true });
    }, 100);
  };

  const handleAddWorkExperience = () => {
    dispatch({ type: "ADD_WORK_EXPERIENCE" });
    setTimeout(() => {
      workExperienceRef.current?.scrollToEnd({ animated: true });
    }, 100);
  };

  const handleAddCertification = () => {
    dispatch({ type: "ADD_CERTIFICATIONS" });
    setTimeout(() => {
      certificationRef.current?.scrollToEnd({ animated: true });
    }, 100);
  };

  const handleAddReference = () => {
    dispatch({ type: "ADD_REFERENCES" });
    setTimeout(() => {
      referenceRef.current?.scrollToEnd({ animated: true });
    }, 100);
  };

  const handleSave = async () => {
    const __data: {
      [key: string]: any;
    } = {
      ...userDetails,
      education,
      experience: workExperience,
      certificaton: certifications,
      refrences: references,
    };

    const _data = new FormData();

    Object.keys(__data).forEach((key: string) => {
      _data.append(key, __data[key]);
    });

    uploadCv.mutate(_data);
  };

  useFocusEffect(
    React.useCallback(() => {
      showHeaderTextHandler("CV Management");
      refetch();
    }, [])
  );

  useEffect(() => {
    if (isSuccess) {
      const fetchedData = data?.data?.user_extra?.job_seakers?.cvStucture;
      if (fetchedData) {
        dispatch({ type: "SET_EDUCATION", payload: fetchedData.education });
        dispatch({
          type: "SET_WORK_EXPERIENCE",
          payload: fetchedData.experience,
        });
        dispatch({
          type: "SET_CERTIFICATIONS",
          payload: fetchedData.certificaton,
        });
        dispatch({ type: "SET_REFERENCES", payload: fetchedData.refrences });
        dispatch({
          type: "SET_USER_DETAILS",
          payload: {
            first_name: fetchedData.first_name || "",
            last_name: fetchedData.last_name || "",
            email: fetchedData.email || "",
            phone_number: fetchedData.phone_number || "",
            address: fetchedData.addresse || "",
            city: fetchedData.city || "",
            state: fetchedData.state || "",
            country_of_residence: fetchedData.country_of_residence || "",
            linkdin: fetchedData.linkdin || "",
            twitter: fetchedData.twitter || "",
            personal_statement: fetchedData.personal_statement || "",
          },
        });
      }
    }
  }, [isSuccess, data]);

  useEffect(() => {
    if (uploadCv.isSuccess) {
      navigation.goBack();
    }
  }, [uploadCv.isSuccess]);

  return (
    <KeyboardAvoidingView>
      <ScrollView
        style={styles.container}
        contentContainerStyle={{
          paddingVertical: scale(10),
        }}
      >
        <Pressable
          onPress={() => {
            navigation.navigate("Upload CV");
          }}
          style={[
            styles.uploadCVButton,
            {
              backgroundColor: theme.placeholder,
            },
          ]}
        >
          <AntDesign name="upload" size={scale(12)} color={theme.text} />
          <Text
            style={{
              fontSize: scale(12),
              fontWeight: "bold",
              color: theme.text,
              marginLeft: scale(5),
            }}
          >
            Upload Instead
          </Text>
        </Pressable>
        <View
          style={{
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "center",
            flex: 1,
          }}
        >
          <ImageComponent
            imageUrl={
              "https://images.unsplash.com/photo-1506794778202-cad84cf45f1d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8bWFuJTIwZmFjZXxlbnwwfHwwfHx8MA%3D%3D&w=1000&q=80"
            }
            style={{
              width: scale(50),
              height: scale(50),
              borderRadius: scale(50),
            }}
          />
        </View>
        {/* input fields  */}
        <View>
          <View>
            <Text>Presonal Statement</Text>
            <TextInput
              numberOfLines={5}
              multiline={true}
              value={userDetails.personal_statement}
              style={{
                padding: scale(7),
                borderRadius: scale(10),
                borderWidth: scale(1),
                borderColor: theme.placeholder,
                marginTop: scale(10),
                textAlignVertical: "top",
                fontSize: scale(14),
              }}
              onChangeText={(text: string) =>
                handleFormChange(text, "personal_statement")
              }
            />
          </View>
          <Seperator height={scale(20)} />
          {/* <CustomSelectInput onChange={() => {}} data={data} /> */}
          <Input
            label="First Name"
            value={userDetails.first_name}
            placeholder="First Name"
            onChangeText={(text: string) =>
              handleFormChange(text, "first_name")
            }
          />
          <Input
            label="Middle Name"
            value={userDetails.middle_name}
            placeholder="First Name"
            onChangeText={(text: string) =>
              handleFormChange(text, "first_name")
            }
          />
          <Input
            label="Last Name"
            value={userDetails.last_name}
            placeholder="Last Name"
            onChangeText={(text: string) => handleFormChange(text, "last_name")}
          />
          <Input
            label="Email"
            value={userDetails.email}
            placeholder="Email"
            onChangeText={(text: string) => handleFormChange(text, "email")}
          />
          <Input
            label="Phone Number"
            value={userDetails.phone_number}
            placeholder="Phone Number"
            onChangeText={(text: string) =>
              handleFormChange(text, "phone_number")
            }
          />
          <Input
            label="Address"
            value={userDetails.address}
            placeholder="Address"
            onChangeText={(text: string) => handleFormChange(text, "address")}
          />
          <Input
            label="City"
            value={userDetails.city}
            placeholder="City"
            onChangeText={(text: string) => handleFormChange(text, "city")}
          />
          <Input
            label="Post Code"
            placeholder="Post Code"
            onChangeText={(text: string) => handleFormChange(text, "email")}
          />
          <Input
            label="Country"
            value={userDetails.country_of_residence}
            placeholder="Country"
            onChangeText={(text: string) =>
              handleFormChange(text, "country_of_residence")
            }
          />

          <Input
            label="Linkdin"
            value={userDetails.linkdin}
            placeholder="Linkdin"
            onChangeText={(text: string) => handleFormChange(text, "linkdin")}
          />

          <Input
            label="Twitter"
            value={userDetails.twitter}
            placeholder="Twitter"
            onChangeText={(text: string) => handleFormChange(text, "twitter")}
          />
        </View>
        {/* // Education */}
        <View
          style={{
            marginBottom: scale(20),
          }}
        >
          <Seperator height={scale(20)} />
          <Text
            style={{
              fontSize: scale(16),
              fontWeight: "bold",
              marginBottom: scale(10),
            }}
          >
            Education
          </Text>
          <ScrollView horizontal style={{ flex: 1 }} ref={educationRef}>
            {education?.map((item: Education) => {
              const _id = item.id;

              return (
                <View
                  style={{
                    marginLeft: scale(10),
                    backgroundColor: _id % 2 !== 0 ? theme.placeholder : "",
                    borderColor: theme.placeholder,
                    borderWidth: _id % 2 === 0 ? StyleSheet.hairlineWidth : 0,
                    padding: scale(10),
                    borderRadius: scale(10),
                    marginBottom: scale(10),
                    width: scale(270),
                  }}
                  key={_id}
                >
                  <Input
                    label="School"
                    value={item.school_name}
                    placeholder="School"
                    onChangeText={(text: string) =>
                      handleEducationChange(text, "school_name", _id)
                    }
                  />
                  <Input
                    label="Start Year"
                    value={item.start_year}
                    placeholder="Start Year"
                    onChangeText={(text: string) =>
                      handleEducationChange(text, "start_year", _id)
                    }
                    keyboardType="numeric"
                  />

                  <Input
                    label="End Year"
                    value={item.end_year}
                    placeholder="End Year"
                    onChangeText={(text: string) =>
                      handleEducationChange(text, "end_year", _id)
                    }
                    keyboardType="numeric"
                  />

                  <Input
                    label="Course Of Study"
                    value={item.course_of_study}
                    placeholder="Course Of Study"
                    onChangeText={(text: string) =>
                      handleEducationChange(text, "course_of_study", _id)
                    }
                  />

                  <Input
                    label="Degree"
                    value={item.degree_type}
                    placeholder="Degree"
                    onChangeText={(text: string) =>
                      handleEducationChange(text, "degree_type", _id)
                    }
                  />
                </View>
              );
            })}
          </ScrollView>
          <View
            style={{
              flexDirection: "row",
              alignItems: "center",
              justifyContent: "center",
            }}
          >
            <TouchableOpacity
              onPress={() => {
                handleAddEducation();
              }}
              style={{
                flexDirection: "row",
                alignItems: "center",
                marginTop: scale(10),
              }}
            >
              <Ionicons
                name="add-circle-outline"
                size={scale(20)}
                color={theme.text}
              />
            </TouchableOpacity>
          </View>
        </View>
        {/* // work experience */}
        <View
          style={{
            marginBottom: scale(20),
          }}
        >
          <Seperator height={scale(20)} />
          <Text
            style={{
              fontSize: scale(16),
              fontWeight: "bold",
              marginBottom: scale(10),
            }}
          >
            Work Experience
          </Text>
          <ScrollView horizontal style={{ flex: 1 }} ref={workExperienceRef}>
            {workExperience?.map((item, index) => {
              const _id = index;

              return (
                <View
                  style={{
                    marginLeft: scale(10),
                    backgroundColor: _id % 2 !== 0 ? theme.placeholder : "",
                    borderColor: theme.placeholder,
                    borderWidth: _id % 2 === 0 ? StyleSheet.hairlineWidth : 0,
                    padding: scale(10),
                    borderRadius: scale(10),
                    marginBottom: scale(10),
                    width: scale(270),
                  }}
                  key={_id}
                >
                  <Input
                    label="Company"
                    value={item.company}
                    placeholder="Company"
                    onChangeText={(text: string) =>
                      handleWorkExperienceChange(text, "company", _id)
                    }
                  />
                  <Input
                    label="Start Year"
                    value={item.start_year}
                    placeholder="Start Year"
                    onChangeText={(text: string) =>
                      handleWorkExperienceChange(text, "startYear", _id)
                    }
                    keyboardType="numeric"
                  />

                  <Input
                    label="End Year"
                    value={item.end_year}
                    placeholder="End Year"
                    onChangeText={(text: string) =>
                      handleWorkExperienceChange(text, "endYear", _id)
                    }
                    keyboardType="numeric"
                  />

                  <Input
                    label="Role"
                    value={item.role}
                    placeholder="Role"
                    onChangeText={(text: string) =>
                      handleWorkExperienceChange(text, "role", _id)
                    }
                    multiline={true}
                    numberOfLines={6}
                    style={{
                      textAlignVertical: "top",
                    }}
                  />

                  <Input
                    label="Responsibilities"
                    value={item.responsibilities}
                    placeholder="Responsibilities"
                    onChangeText={(text: string) =>
                      handleWorkExperienceChange(text, "responsibilities", _id)
                    }
                    multiline={true}
                    numberOfLines={6}
                    style={{
                      textAlignVertical: "top",
                    }}
                  />
                </View>
              );
            })}
          </ScrollView>
          <View
            style={{
              flexDirection: "row",
              alignItems: "center",
              justifyContent: "center",
            }}
          >
            <TouchableOpacity
              onPress={handleAddWorkExperience}
              style={{
                flexDirection: "row",
                alignItems: "center",
                marginTop: scale(10),
              }}
            >
              <Ionicons
                name="add-circle-outline"
                size={scale(20)}
                color={theme.text}
              />
            </TouchableOpacity>
          </View>
        </View>
        {/* // Certification */}
        <View
          style={{
            marginBottom: scale(20),
          }}
        >
          <Seperator height={scale(20)} />
          <Text
            style={{
              fontSize: scale(16),
              fontWeight: "bold",
              marginBottom: scale(10),
            }}
          >
            Certification
          </Text>
          <ScrollView horizontal style={{ flex: 1 }} ref={certificationRef}>
            {certifications?.map((item, index) => {
              const _id = index;

              return (
                <View
                  style={{
                    marginLeft: scale(10),
                    backgroundColor: _id % 2 !== 0 ? theme.placeholder : "",
                    borderColor: theme.placeholder,
                    borderWidth: _id % 2 === 0 ? StyleSheet.hairlineWidth : 0,
                    padding: scale(10),
                    borderRadius: scale(10),
                    marginBottom: scale(10),
                    width: scale(270),
                  }}
                  key={_id}
                >
                  <Input
                    label="Certificate"
                    value={item.certification}
                    placeholder="Certificate"
                    onChangeText={(text: string) =>
                      handleCertificationsChange(text, "certificate", _id)
                    }
                  />
                  <Input
                    label="Year"
                    value={item.year}
                    placeholder="Year"
                    onChangeText={(text: string) =>
                      handleCertificationsChange(text, "year", _id)
                    }
                    keyboardType="numeric"
                  />

                  <Input
                    label="Issuer"
                    value={item.issuer}
                    placeholder="Issuer"
                    onChangeText={(text: string) =>
                      handleCertificationsChange(text, "issuer", _id)
                    }
                  />
                </View>
              );
            })}
          </ScrollView>
          <View
            style={{
              flexDirection: "row",
              alignItems: "center",
              justifyContent: "center",
            }}
          >
            <TouchableOpacity
              onPress={handleAddCertification}
              style={{
                flexDirection: "row",
                alignItems: "center",
                marginTop: scale(10),
              }}
            >
              <Ionicons
                name="add-circle-outline"
                size={scale(20)}
                color={theme.text}
              />
            </TouchableOpacity>
          </View>
        </View>

        {/* // Certification */}
        <View
          style={{
            marginBottom: scale(20),
          }}
        >
          <Seperator height={scale(20)} />
          <Text
            style={{
              fontSize: scale(16),
              fontWeight: "bold",
              marginBottom: scale(10),
            }}
          >
            References
          </Text>
          <ScrollView horizontal style={{ flex: 1 }} ref={referenceRef}>
            {references?.map((item, index) => {
              const _id = index;

              return (
                <View
                  style={{
                    marginLeft: scale(10),
                    backgroundColor: _id % 2 !== 0 ? theme.placeholder : "",
                    borderColor: theme.placeholder,
                    borderWidth: _id % 2 === 0 ? StyleSheet.hairlineWidth : 0,
                    padding: scale(10),
                    borderRadius: scale(10),
                    marginBottom: scale(10),
                    width: scale(270),
                  }}
                  key={_id}
                >
                  <Input
                    label="Reference Name"
                    value={item.full_name}
                    placeholder="Reference Name"
                    onChangeText={(text: string) =>
                      handleReferencesChange(text, "fullName", _id)
                    }
                  />

                  <Input
                    label="Relationship"
                    value={item.relationship}
                    placeholder="Relationship"
                    onChangeText={(text: string) =>
                      handleReferencesChange(text, "relationship", _id)
                    }
                  />

                  <Input
                    label="Reference Email"
                    value={item.email}
                    placeholder="Reference Email"
                    onChangeText={(text: string) =>
                      handleReferencesChange(text, "email", _id)
                    }
                  />

                  <Input
                    label="Phone Number"
                    value={item.phone_number}
                    placeholder="Phone Number"
                    onChangeText={(text: string) =>
                      handleReferencesChange(text, "phoneNumber", _id)
                    }
                  />
                </View>
              );
            })}
          </ScrollView>
          <View
            style={{
              flexDirection: "row",
              alignItems: "center",
              justifyContent: "center",
            }}
          >
            <TouchableOpacity
              onPress={handleAddReference}
              style={{
                flexDirection: "row",
                alignItems: "center",
                marginTop: scale(10),
              }}
            >
              <Ionicons
                name="add-circle-outline"
                size={scale(20)}
                color={theme.text}
              />
            </TouchableOpacity>
          </View>
        </View>

        <Button
          onPress={() => {
            handleSave();
          }}
        >
          Save
        </Button>
        <Seperator height={scale(20)} />
      </ScrollView>
    </KeyboardAvoidingView>
  );
};

export default Home;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
  },
  uploadCVButton: {
    paddingHorizontal: scale(5),
    paddingVertical: scale(7),
    borderRadius: scale(10),
    flexDirection: "row",
    alignSelf: "flex-end",
    marginRight: scale(10),
  },
});
